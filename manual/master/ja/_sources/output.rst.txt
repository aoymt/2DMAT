出力ファイル
=====================

ソルバー、アルゴリズム毎に出力されるファイルが異なります。
以下、ソルバー、アルゴリズム毎に記載します。

ソルバーで出力するファイル
******************************

各プロセスごとに、プロセス番号のついたサブフォルダ以下に出力されます。

``surf`` で出力するファイル
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``surf`` では、``surf.exe`` で出力されるファイルが、
ランクの番号が記載されたフォルダ下にある ``Log%%%%%`` フォルダに一式出力されます。
ここでは、 ``2dmat`` で独自に出力するファイルについて説明します。

``stdout``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
``surf.exe`` が出力する標準出力が記載されています。

以下、出力例です。

.. code-block::

     bulk-filename (end=e) ? :
     bulkP.b
     structure-filename (end=e) ? :
     surf.txt
     output-filename :
     surf-bulkP.s

``RockingCurve.txt``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``Log%%%%%`` フォルダに出力されます。
1行目にヘッダ、2行目以降は角度、コンボリューションされた計算値・実験値、規格化された計算値・実験値と、生の計算値が順に出力されます。
以下、出力例です。

.. code-block::

    #degree convolution_I_calculated I_experiment convolution_I_calculated(normalized) I_experiment(normalized) I_calculated
    0.1 0.0023816127859192407 0.002374995 0.004354402952499057 0.005364578226620574 0.001722
    0.2 0.003626530149456865 0.003614789 0.006630537795012198 0.008164993342397588 0.003397
    0.3 0.00504226607469267 0.005023215 0.009218987407498791 0.011346310125551366 0.005026
    0.4 0.006533558304296079 0.006504978 0.011945579793136154 0.01469327865677437 0.006607
    0.5 0.00803056955158873 0.007990674 0.014682628499657693 0.018049130948243314 0.008139
    0.6 0.009493271317558538 0.009441623 0.017356947736613827 0.021326497600946535 0.00962
    0.7 0.010899633015118851 0.010839445 0.019928258053867838 0.024483862338931763 0.01105
    ...

アルゴリズムで出力するファイル
******************************

共通
~~~~~~~~~~~~

``time.log``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
各ランク毎に計算にかかった時間を出力します。
各ランクのサブフォルダ以下に出力されます。
計算の前処理にかかった時間、計算にかかった時間、計算の後処理にかかった時間について、
``prepare`` ,  ``run`` , ``post`` のセクションごとに記載されます。

以下、出力例です。

.. code-block::

    #prepare
     total = 0.007259890999989693
    #run
     total = 1.3493346729999303
     - file_CM = 0.0009563499997966574
     - submit = 1.3224223930001244
    #post
     total = 0.000595873999941432


``mapper`` で出力するファイル
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``ColorMap.txt``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

各メッシュでの候補パラメータと、その時の ``R-factor`` が記載されたファイルです。
入力ファイルの ``[solver]`` - ``[param]`` セクションにある、
``string_list`` で定義された変数の順番でメッシュデータは記載され、
最後に ``R-factor`` の値が記載されます。

以下、出力例です。

.. code-block::

    6.000000 6.000000 0.047852
    6.000000 5.750000 0.055011
    6.000000 5.500000 0.053190
    6.000000 5.250000 0.038905
    6.000000 5.000000 0.047674
    6.000000 4.750000 0.065919
    6.000000 4.500000 0.053675
    6.000000 4.250000 0.061261
    6.000000 4.000000 0.069351
    6.000000 3.750000 0.071868
    ...


``minsearch`` で出力するファイル
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``SimplexData.txt``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

最小値を求める途中経過に関する情報を出力します。
1行目はヘッダー、2行目以降にstep, 入力ファイルの ``[solver]`` - ``[param]`` セクションにある、
``string_list`` で定義された変数の値、最後に関数の値が出力されます。

以下、出力例です。

.. code-block::

    #step z1 z2 z3 R-factor
    0 5.25 4.25 3.5 0.015199251773721183
    1 5.25 4.25 3.5 0.015199251773721183
    2 5.229166666666666 4.3125 3.645833333333333 0.013702918021532375
    3 5.225694444444445 4.40625 3.5451388888888884 0.012635279378225261
    4 5.179976851851851 4.348958333333334 3.5943287037037033 0.006001660077530159
    5 5.179976851851851 4.348958333333334 3.5943287037037033 0.006001660077530159

``res.txt``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

最終的に得られた目的関数の値とその時のパラメータの値を記載しています。
最初に目的関数が、
その後は入力ファイルの ``[solver]`` - ``[param]`` セクションにある、
``string_list`` で定義された変数の値が順に記載されます。

以下、出力例です。

.. code-block::

    fx = 7.382680568652868e-06
    z1 = 5.230524973874179
    z2 = 4.370622919269477
    z3 = 3.5961444501081647


``exchange`` で出力するファイル
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``RANK/trial.txt``
^^^^^^^^^^^^^^^^^^^^^
各レプリカについて、モンテカルロサンプリングで提案されたパラメータと、対応する目的関数の値です。
1列目にステップ数、2列目にレプリカの温度、3列目に目的変数の値、4列目以降にパラメータが記載されます。

.. code-block::

    # step T fx z1 z2
    0 0.004999999999999999 0.07830821484593968 3.682008067401509 3.9502750191292586 
    1 0.004999999999999999 0.0758494287185766 2.811346329442423 3.691101784194861 
    2 0.004999999999999999 0.08566823949124412 3.606664760390988 3.2093903670436497 
    3 0.004999999999999999 0.06273922648753057 4.330900869594549 4.311333132184154 


``RANK/result.txt``
^^^^^^^^^^^^^^^^^^^^^
各レプリカについて、モンテカルロサンプリングで生成されたパラメータと、対応する目的関数の値です。
``trial.txt`` と同一の書式です。

.. code-block::

    # step T fx z1 z2
    0 0.004999999999999999 0.07830821484593968 3.682008067401509 3.9502750191292586 
    1 0.004999999999999999 0.07830821484593968 3.682008067401509 3.9502750191292586 
    2 0.004999999999999999 0.07830821484593968 3.682008067401509 3.9502750191292586 
    3 0.004999999999999999 0.06273922648753057 4.330900869594549 4.311333132184154 


``best_result.txt``
^^^^^^^^^^^^^^^^^^^^
サンプリングされた全データのうち、目的関数の値が最小となったパラメータと、対応する目的関数の値です。

.. code-block::

    nprocs = 4
    rank = 2
    step = 65
    fx = 0.008233957976993406
    z1 = 4.221129370933539
    z2 = 5.139591716517661



``bayes`` で出力するファイル
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``BayesData.txt`` 
^^^^^^^^^^^^^^^^^^^^^^
最適化過程の各ステップにおいて、
パラメータと対応する目的関数の値が、
これまでの最適パラメータとそのステップで探索したパラメータの順に記載されます。

.. code-block::

    #step z1 z2 R-factor z1_action z2_action R-factor_action
    0 4.75 4.5 0.05141906746102885 4.75 4.5 0.05141906746102885
    1 4.75 4.5 0.05141906746102885 6.0 4.75 0.06591878368102033
    2 5.5 4.25 0.04380131351780189 5.5 4.25 0.04380131351780189
    3 5.0 4.25 0.02312528177606794 5.0 4.25 0.02312528177606794
    ...
